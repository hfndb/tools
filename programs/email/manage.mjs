#! /usr/bin/env node
import { basename, extname, join } from "node:path";
import { Files, Misc } from "./lib.mjs";

/**
 * Script to manage emails
 *
 * Usage: manage.mjs edit|strip|sessions
 *
 * - Option edit:
 *     Transform an .html file (email) to a file
 *       that an email client can use
 * - Option strip:
 *     Strip temp file generated by option e for archiving purposes,
 *       to replace <br>\n<br> with \n
 */

let vars = {
	action: Misc.getArg() || "strip",
	fileTemplate: process.env.EMAIL_TEMPLATE || "",
	fileTmp: process.env.EMAIL_TMP || "",
	dirEmail: process.env.EMAIL_PRROGRAM || "",
	dirSessions: process.env.EMAIL_SESSIONS || "",
	files: [],
};

class Manage {
	// ----------------------------------------------------------------
	// Section: Preparing for email client and archiving
	// ----------------------------------------------------------------

	/**
	 * Prepare for email client:
	 * Edit original file and write a temp file
	 */
	static async editFile() {
		await Files.pathExists(vars.fileTemplate);

		let ml = await Files.readFile(vars.fileTemplate);

		// extract content
		let re = new RegExp("@ -->(.)+<!-- @", "gms");
		let match = re.exec(ml);
		ml = match[0].substring(5, match[0].length - 6).trim();

		// remove paragraph counter
		ml = ml
			.replace(/<ol><li>[\n\r]*/gm, "")
			.replace(/<\/li><li>[\n\r]*/gm, "")
			.replace(/<\/li><\/ol>[\n\r]*/gm, "");

		// replace <p> tags with <br>
		ml = ml.replace(/<[/]*p.*>/gm, "<br>");

		await Files.writeFile(vars.fileTmp, ml, undefined, false);
	}

	/**
	 * Strip generated temp file for archiving purposes
	 */
	static async stripTmpFile() {
		await Files.pathExists(vars.fileTmp);
		// Read, replace
		let data = await Files.readFile(vars.fileTmp);
		let out = data.toString().replace(new RegExp("<br>[\r]*\n<br>", "gim"), "");

		// Backup, write
		await Files.copy(vars.fileTmp, vars.fileTmp + "~"); // For safety
		await Files.writeFile(vars.fileTmp, out, undefined, false);
	}

	// ----------------------------------------------------------------
	// Section: Sessions
	// ----------------------------------------------------------------

	static async scan() {
		let files = await Files.readDir(vars.dirSessions);
		vars.files = files.filter(item => {
			if (extname(item) != ".html") return false;
			if (basename(item).startsWith("_")) return false;
			return true;
		});
	}

	/**
	 * Show menu and act accordingly
	 *
	 * @returns {boolean} to continue
	 */
	static async sessions() {
		await Misc.exec("clear");
		Misc.menuSpace();
		Misc.menuHeader(Misc.color().blue("Manage email sessions"));
		Misc.menuSpace();
		for (let i = 0; i < vars.files.length; i++) {
			Misc.menuItem((i + 1).toString().padStart(2, " ") + ": " + vars.files[i]);
		}
		Misc.menuSpace();
		Misc.menuItem(
			Misc.color().green("Commands") +
				" a (activate), r (remove), s (new session from active)",
		);
		Misc.menuItem("  in format <command> <item nr>");
		Misc.menuSpace();

		let choice = await Misc.ask("Your choice please ");

		if (!choice) return false;

		if (choice == "s") {
			// New session from active
			choice = await Misc.ask("File name: ");
			if (!choice.endsWith(".html")) choice += ".html";

			await Files.copy(vars.fileTemplate, join(vars.dirSessions, choice));
			await Manage.scan();

			return true;
		}

		if (!choice.includes(" ")) return false;

		choice = choice.split(" ");

		let file;
		try {
			let item = parseInt(choice[1]) - 1;
			file = vars.files[item];
		} catch (err) {
			return true; // Invalid item nr
		}

		switch (choice[0]) {
			case "a":
				// Activate
				await Files.copy(join(vars.dirSessions, file), vars.fileTemplate);
				console.log(`File ${file} put in position`);
				return false;
				break;
			case "r":
				// Remove
				await Files.erase(join(vars.dirSessions, file));
				await Manage.scan();
				return true;
				break;
		}

		return true;
	}
}

switch (vars.action) {
	case "edit":
		await Manage.editFile();
		break;
	case "strip":
		await Manage.stripTmpFile();
		break;
	case "sessions":
		let loop = true;
		await Manage.scan();
		while (loop) {
			loop = await Manage.sessions();
		}
		break;
}
