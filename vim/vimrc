" All system-wide defaults are set in $VIMRUNTIME/debian.vim and sourced by
" the call to :runtime you can find below.  If you wish to change any of those
" settings, you should do it in this file (/etc/vim/vimrc), since debian.vim
" will be overwritten everytime an upgrade of the vim packages is performed.
" It is recommended to make changes after sourcing debian.vim since it alters
" the value of the 'compatible' option.

runtime! debian.vim

" Vim will load $VIMRUNTIME/defaults.vim if the user does not have a vimrc.
" This happens after /etc/vim/vimrc(.local) are loaded, so it will override
" any settings in these files.
" If you don't want that to happen, uncomment the below line to prevent
" defaults.vim from being loaded.
" let g:skip_defaults_vim = 1

" Uncomment the next line to make Vim more Vi-compatible
" NOTE: debian.vim sets 'nocompatible'.  Setting 'compatible' changes numerous
" options, so any other options should be set AFTER setting 'compatible'.
"set compatible

" Vim5 and later versions support syntax highlighting. Uncommenting the next
" line enables syntax highlighting by default.
if has("syntax")
  syntax on
endif

" If using a dark background within the editing area and syntax highlighting
" turn on this option as well
"set background=dark

" Uncomment the following to have Vim jump to the last position when
" reopening a file
"au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

" Uncomment the following to have Vim load indentation rules and plugins
" according to the detected filetype.
"filetype plugin indent on

" The following are commented out as they cause vim to behave a lot
" differently from regular Vi. They are highly recommended though.
"set showcmd		" Show (partial) command in status line.
"set showmatch		" Show matching brackets.
"set ignorecase		" Do case insensitive matching
"set smartcase		" Do smart case matching
"set incsearch		" Incremental search
"set autowrite		" Automatically save before commands like :next and :make
"set hidden		" Hide buffers when they are abandoned
"set mouse=a		" Enable mouse usage (all modes)

" Source a global configuration file if available
if filereadable("/etc/vim/vimrc.local")
  source /etc/vim/vimrc.local
endif


" _____________________________________________________________________________________________
"
" Settings added to default config
" _____________________________________________________________________________________________
"

"---------------------------------
" Plugin section - begin
"---------------------------------
" For newly added plugins, run :PlugInstall in vim or commandline, vim +PlugInstall +qall

call plug#begin('~/.vim/plugged')
Plug 'morhetz/gruvbox'
Plug 'mattn/emmet-vim'
Plug 'sheerun/vim-polyglot'
Plug 'mattn/jscomplete-vim'
"Plug 'preservim/nerdtree'
Plug 'vim-scripts/marvim'
Plug '~/.fzf'
Plug 'junegunn/fzf.vim'
Plug 'vim-airline/vim-airline'
call plug#end()


" Config emmet - trigger becomes ,,
"---------------------------------
let g:user_emmet_leader_key=','


" Config gruvbox
"---------------------------------
let g:gruvbox_contrast_dark = 'medium' "Possible values are soft, medium and hard. Default: medium
autocmd vimenter * colorscheme gruvbox
set background=dark    " Setting dark mode


" Config for NERDtree
"---------------------------------
" If more than one window and previous buffer was NERDTree, go back to it.
"autocmd BufEnter * if bufname('#') =~# "^NERD_tree_" && winnr('$') > 1 | b# | endif
"let g:plug_window = 'noautocmd vertical topleft new'
"map <Leader>f :NERDTreeToggle<CR>


" Config for fzf
"---------------------------------
nnoremap <Leader>o :Files ./src
nnoremap <Leader>h :History<CR>
nnoremap <Leader>t :Tags<CR>
nnoremap <Leader>j :BTags<CR>
nnoremap <Leader>s :Rg
" ~/.vim/plugged/fzf.vim/
" Default env variable:
" FZF_DEFAULT_COMMAND="rg --files --follow --hidden"


" Config for vim-javascript
"---------------------------------
let g:javascript_plugin_jsdoc = 1


" Config for jscomplete-vim
"---------------------------------
autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
autocmd FileType typescript set omnifunc=javascriptcomplete#CompleteJS


" Config Airline for buffers
"---------------------------------
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_nr_show = 0
let g:airline#extensions#tabline#formatter = 'default'
" let g:airline_theme = 'gruvbox'

"---------------------------------
" Plugin section - end
"---------------------------------

" https://superuser.com/questions/181377/auto-reloading-a-file-in-vim-as-soon-as-it-changes-on-disk
" Autoreolad, for if code beautify feature for sass and/or src is switched on
set autoread
au CursorHold * checktime

" Disable scratch preview window
set completeopt-=preview

" In gvim this setting works fine, in vim you might need to install https://github.com/djoshea/vim-autoread
" To prevent too much polling, best mode of operation is WatchForChangesWhileInThisBuffer

" Auto-close of quotes, brackets etc.
inoremap " ""<left>
inoremap ' ''<left>
inoremap ( ()<left>
inoremap [ []<left>
inoremap { {}<left>
"inoremap {<CR> {<CR>}<ESC>O
"inoremap {;<CR> {<CR>};<ESC>O
autocmd FileType javascript inoremap ` `${}`<left><left><left><left>

" Auto-replace of ASCII-smileys with utf8 smileys
" Smile
iabbrev :) ðŸ˜„
" Grin
iabbrev :D ðŸ˜„
" Wink
iabbrev ;) ðŸ˜‰
" Cool
iabbrev 8) ðŸ˜Ž
" Devil
iabbrev >) ðŸ˜ˆ

" Indenting
" https://vim.fandom.com/wiki/Indenting_source_code
set shiftwidth=3  "indenting is 3 spaces
set tabstop=3
set autoindent
set smartindent

" Code folding
au BufReadPre * setlocal foldmethod=syntax
set foldlevelstart=99       " start file with all folds opened

" Line numbering
set number
"For default colorscheme
" highlight LineNr term=bold cterm=NONE ctermfg=DarkGrey ctermbg=NONE gui=NONE guifg=DarkGrey guibg=NONE

" In case of default theme, alter some hightlighting colors by YouCompleteMe
" highlight YcmErrorSection ctermfg=white ctermbg=DarkGray
" highlight YcmWarningSection ctermfg=white ctermbg=Blue

" Show tabs as characters
set list
set listchars=tab:>-

" Config for git commit.
" If vim isn't the default editor put export EDITOR=vim in your ~/.bashrc
au FileType gitcommit
 \ hi gitcommitSummary ctermfg=white ctermbg=black

" Buffers
set hidden
nnoremap <F5> :e<CR>                       " Reload
nnoremap <C-Down> :bnext<CR>               " Ctrl-down - Next buffer
nnoremap <C-Up> :bprev<CR>                 " Ctrl-up - Previous buffer
nnoremap <Leader>c :bd!<CR>                " \c - Close buffer
                                           " \b - Show buffer list to enter buffer nummber, or part of file name, to go to
nnoremap <Leader>b :ls<CR>:b<Space>
                                           " Same as above but with 'more'
"nnoremap <C-e> :set nomore <Bar> :ls <Bar> :set more <CR>:b<Space>

" System clipboard integration; Ctrl-c for copy (yank), Ctrl-v for paste
if has("clipboard")
    vnoremap <C-C> "+y
    map <C-V> "+gP
    cmap <C-V> <C-R>+
endif

" CTRL-S to save (write) file, also in Insert mode
noremap <C-S>		:update<CR>
vnoremap <C-S>		<C-C>:update<CR>
inoremap <C-S>		<Esc>:update<CR>

" For gvim and nvim-qt; make more space
if has("gui_running") || has('nvim')
	set guifont=Hack\ 12
	set lines=999 columns=999              " Start maximized
	set guioptions-=m                      " Remove menu bar
	set guioptions-=T                      " Remove toolbar
	set guioptions-=r                      " Remove right-hand scroll bar
endif

" Set binary path to tsserver, part of TypeScript, for YouCompleteMe
let g:ycm_tsserver_binary_path='/usr/local/bin/tsserver'

" ----------------------------------------------------------------
" Defined key mappings:
" - \b - Go to buffer in list
" - \c - Close buffer
" - \f - Open files using NERDtree (commented out)
" - \j - Jump to tag in current buffer using fzf
" - \t - Jump to tag in project using fzf
" - \o - Open file using fzf
" - \s - Search project for string using fzf - `Alt-a` to select all, `Alt-D` to deselect all
" - \h - Open file from history using fzf
" - Ctrl-up - Go to previous buffer
" - Ctrl-down - Go to next buffer
" - Ctrl-c,v - Copy/paste
" - Ctrl-s - Write buffer
" - F5 - Reload file
" - ,, - Trigger Emmet
" ----------------------------------------------------------------
